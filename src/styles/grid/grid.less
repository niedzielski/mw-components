// Modern 12 column grid system based on flex property.
// Inspired by Vuetify Grid, Boostrap grid, and similar flexbox based responsive grid
// implementations.

@cols: 12;
@gutter: 8px;
@container-width: 100%;

// Break points
@breakpoints: {
	xs: ~"only screen and (min-width: 300px)";
	sm: ~"only screen and (min-width: 600px)";
	md: ~"only screen and (min-width: 960px)";
	lg: ~"only screen and (min-width: 1264px)";
	xl: ~"only screen and (min-width: 1904px)";
}

// Viewports. See .storybook/preview.js.
@viewports: {
	xs: ~"only screen and (max-width: 599px)";
	sm: ~"only screen and (min-width: 600px) and (max-width: 959px)";
	md: ~"only screen and (min-width: 960px) and (max-width: 1263px)";
	lg: ~"only screen and (min-width: 1264px) and (max-width: 1903px)";
	xl: ~"only screen and (min-width: 1904px)";
}

// Generate LTR and RTL style for a given property and value. Replaces 'left' by 'right' and vice
// versa. The compressed size difference is negligible.
.bidi(@property, @value) {
	[dir="ltr"] & {
		@{property}: @value;
	}
	@flipped-property-l2r: replace( @property, 'left', 'right');
	@flipped-property: if( @flipped-property-l2r=@property, replace( @property, 'right', 'left'), @flipped-property-l2r );
	@flipped-value-l2r: replace(@value, 'left', 'right');
	@flipped-value: if( @flipped-value-l2r=@value,replace( @value, 'right', 'left'), @flipped-value-l2r );

	[dir="rtl"] & {
		@{flipped-property}: @flipped-value;
	}
}

// Generate style with responsive columns
.generateResponsiveCols(@counter, @media) when (@counter > 0) {
	@width: (@counter / @cols) * 100;
	@mediaKey: if(@media='', ~'', ~'@{media}-');

	.col-@{mediaKey}@{counter} {
		flex-basis: ~"@{width}%";
		max-width: ~"@{width}%";
	}

	.col-offset-@{mediaKey}@{counter} {
		.bidi(~' margin-left', ~"@{width}%");
	}

	.generateResponsiveCols((@counter - 1), @media);
}

// Generate margin and padding style for different breakpoints.
.generateSpacing(@counter, @media) when (@counter >= 0) {
	@width: @counter * 4;
	@mediaKey: if(@media='', ~'', ~'@{media}-');

	.ps-@{mediaKey}@{counter} {
		.bidi(~'padding-left', ~"@{width}px");
	}
	.ms-@{mediaKey}@{counter} {
		.bidi(~"margin-left", ~"@{width}px");
	}
	.pe-@{mediaKey}@{counter} {
		.bidi(~'padding-right', ~"@{width}px");
	}
	.me-@{mediaKey}@{counter} {
		.bidi(~"margin-right", ~"@{width}px");
	}

	.pt-@{mediaKey}@{counter} {
		padding-top: ~"@{width}px";
	}
	.mt-@{mediaKey}@{counter} {
		margin-top: ~"@{width}px";
	}
	.pb-@{mediaKey}@{counter} {
		padding-bottom: ~"@{width}px";
	}
	.mb-@{mediaKey}@{counter} {
		margin-bottom: ~"@{width}px";
	}
	.pa-@{mediaKey}@{counter} {
		padding: ~"@{width}px";
	}
	.ma-@{mediaKey}@{counter} {
		margin: ~"@{width}px";
	}
	.generateSpacing(@counter - 1, @media);
}

.container {
	width: @container-width;
	display: block;
	margin: auto;

	.row,
	.column {
		box-sizing: border-box;
		display: flex;
		flex: 0 1 auto;
		flex-wrap: wrap;
		margin: @gutter;

		&.no-wrap {
			flex-wrap: nowrap;
		}

		[class^="col-"] {
			box-sizing: border-box;
			flex-grow: 0;
			flex-shrink: 0;
			padding-right: @gutter / 2;
			padding-left: @gutter / 2;
		}

		.generateResponsiveCols(@cols,'');
		.generateSpacing(@cols, '');

		each(@breakpoints, {
			.col-@{key}-hidden {
				display: flex;
			}
		});

		.col-xs-hidden,
		.col-hidden {
			display: none;
		}

		each(@breakpoints, {
			@media @value {
				.generateResponsiveCols(@cols, @key);
				.generateSpacing(@cols, @key);

				each(@breakpoints, {
					.col-@{key}-hidden {
						display: flex;
					}
				});

				.col-hidden {
					display: flex;
				}
				.col-@{key}-hidden {
					display: none;
				}
			}
		});
	}

	.row {
		flex-direction: row;

		&.reverse {
			flex-direction: row-reverse;
		}
	}

	.column {
		flex-direction: column;

		&.reverse {
			flex-direction: column-reverse;
		}
	}

	[class*="items-"],
	[class*="justify-"] {
		display: flex;
	}

	// Display styles
	.d-none {
		display: none;
	}

	.d-flex {
		display: flex;
	}

	each(@viewports, {
		@media @value {
			.d-@{key}-only-none {
				display: none;
			}
			.d-@{key}-only-flex {
				display: flex;
			}
		}
	});

	.items-center {
		align-items: center;
	}

	.items-start {
		align-items: flex-start;
	}

	.items-end {
		align-items: flex-end;
	}

	.items-stretch {
		align-items: stretch;
	}

	.justify-center {
		justify-content: center;
	}

	.justify-end {
		justify-content: flex-end;
	}

	.justify-start {
		justify-content: flex-start;
	}

	.justify-around {
		justify-content: space-around;
	}

	.justify-between {
		justify-content: space-between;
	}
}
